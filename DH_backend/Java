[컴파일]
컴퓨터가 이해할 수 있는 언어로 번역하는 행위

[컴파일러]
컴퓨터가 이해할 수 있는 언어로 번역하는 프로그램

[JAVA의 장점]
1. (JVM : 자바 가상 머신) 운영체제(플랫폼)로 부터 독립적이다.
    -> 코드(.class)를 한번 작성하면 여러 운영체제에서 실행 가능
2. 객체지향 언어이다. 
    -> 유지보수가 쉬움 / 확장성 우수
3. 안정적이다. 
    -> 가비지 컬렉터(GC)가 메모리를 자동(동적)으로 관리
4. 오픈소스(미리 만들어진 소스)
    -> JDK / SPRING /JSP 등 다양한 오픈소스 제공

[JAVA의 사용처]
1. 웹
2. 앱
3. 게임



[진수]
2진수 / 8진수 / 10진수 / 16진수

[단위]
비트 -> 바이트 -> 킬로바이트 -> 메가바이트 -> 기가바이트 -> 테라바이트
- 1비트 : 명령어의 최소단위
- 1바이트(8비트) : 운영체제 용량의 최소 단위
- 1킬로바이트(1024바이트)

[아스키코드]
이용한 영문자 / 숫자 / 특수문자를 7비트로 정의해놓은 규칙 -> 한글지원 X (유니코드는 한글 지원)
=> 2(비트)의 7승으로 128 표현가능 -> 가장 앞 비트는 부호비트

[컴퓨터의 부호 있는 수 표현]
1. 부호화 - 크기
2. 1의 보수
3. 2의 보수


[변수]
- 변하는 수
- 값을 넣을 수 있는 공간
1. 변수의 형태
    자료형 변수명 = 리터럴;
2. 변수의 선언
    - 선언 : 자료형 변수명;
    - 초기화 : 자료형 변수명 = 리터럴;
3. 변수 선언 제약사항
    - 숫자로 시작 X
    - 특수 문자는  _(언더바) / $(달러) 만 사용 가능
    - 키워드 사용불가

[기본 자료형] -> 메모리를 효율적으로 할당하기 위해 사용할 값에 맞는 자료형 사용
1. 논리형 자료형
    - boolean
        - 1 byte
        - true / false 만 표현 가능
2. 문자형 자료형
    - char -> 한글자
        - 1 byte
        - 유니코드
        - ''(작은 따옴표) 사용
    - String -> 문자열 
        - N byte -> 입력 문자 크기에 따라 상이
        - 문자열 클래스 / 객체
        - "" (큰 따옴표) 사용
3. 정수형 자료형
    - byte
        - 1 byte
        - +-128 까지 표현 가능
    - short
        - 2 byte
        - +-3만 까지 표현가능
    - int 
        - 4 byte
        - +- 21억 까지 표현가능
        ★ 리터럴 정수(= 정수의 기본타입 ) -> 키보드로 입력하는 모든 값은 int형이다.
    - long
        - 8 byte
        - +- 21억 이상 까지 표현 가능
        ★ 정수의 기본타입은 int 형이기 때문에 long자료형 
           사용 시 값 뒤에 L을 붙여 사용
4. 실수(=부동소수점)형 자료형
    - float
        - 4 byte
        - 소수점 8자리 까지 표현 가능
        ★ 실수의 기본타입은 double 형이기 때문에 float자료형 
           사용 시 값 뒤에 F을 붙여 사용
    - double
        - 8 byte
        - 소수점 17자리 까지 표현 가능
        ★ 리터럴 실수(= 실수의 기본 타입)

[부동소수점]
1. float 
    - 부호비트 : 1비트 
    - 지수부 : 8비트 사용 
    - 가수부 : 23비트 사용
2. double
    - 부호비트 : 1비트 
    - 지수부 : 11비트 사용 
    - 가수부 : 52비트 사용
ex . 1000000
        -> 지수부(숫자의 크기) : 10의 6승
        -> 가수부(숫자의 유효 자릿수) : 1
        => 1.0 * 10의 6승

-> 0과 1 사이의 실수는 끝없는 무한대 표현이 가능 
    => 컴퓨터의 한계(표현 한계가 넘어가 무한대에 빠지기 때문)
-> 한계 발생으로 인해 실제 연산이 중요한 부분의 업무에서는 실수타입 사용 x 
    => 라이브러리 또는 문자열 처리를 통해 실수 계산


[Java 파일 형식]
1. .java : 자바코드를 작성할 수 있는 확장자 명 => 자바코드
2. .class : 자바가 .java 파일을 컴파일하여 만들어진 파일 => 기계어
3. main함수 : 스레드가 내장된 함수 => main함수 밖에 코드 작성 시 번역은 되지만 실행은 불가
		★ 스레드 : 번역된 코드를 읽는 실행 흐름
=> Java는 위 3가지가 반드시 포함되어야 실행 가능
		
- 과정 : 개발자가 .java파일에서 .class 문법작성 ---> 컴파일 ---> class파일 생성
- .class파일위치 :  workspace -> 프로젝트 -> bin 폴더 > .class 파일

-> 하나의 자바파일에 여러 개의 클래스 선언가능 => 페이지 내 .class파일이 따로 만들어짐
-> 자바는 HTML / JS 등과 달리 자체 컴파일이 가능하다.

[상수]
- final 키워드 사용
- 관례적으로 모든 단어를 대문자로 작성

[리터럴]
개발자가 키보드로 입력한 숫자 / 문자 / 논리 를 일컫는 말
-> Java의 경우 리터럴 값이 상수풀(메모리의 공간)이라는 공간에 상수로 저장되어있음

[형변환]
- 기본 원칙
	1. 메모리 크기 ↓ => 메모리 크기 ↑
	2. 정밀도 ↓ => 정밀도 ↑
	(정수)
	byte(1바이트) -> short / char(2바이트) -> int(4바이트) -> long(8바이트)
	=>	(실수는 정수보다 표현범위가 넓고 정밀하기 때문에 long(8바이트)에서 float(4바이트)로 형변환 가능)
	(실수)
	float(4바이트) -> double(8바이트)

1. 묵시적형변환(=자동형변환)
	- byte + byte = int
	- byte + short => int
	- int + int => int
	- int + long => long
	- int + float => float
	- float + double => double
	★ 예외 . byte / short의 연산은 무조건 int형이 됨
	
2. 명시적형변환(=강제형변환(캐스팅))
	- 메모리 크기 ↑ -> 메모리 크기 ↓
	- 데이터 손실이 생길 수 있음
	- 연산 중 강제형변환도 가능
	- 형식 : (변환할 자료형)변수명

=> 형변환을 통해 Java의 특징 중 하나인 다형성(객체가 여러 개의 형식 / 자료형을 가지는 성질) 표현가능

[입출력]
1. 입력함수
	- Scanner
		1) 입력 객체 생성
			- 형식 : new 클래스명();
		2) .nextXXX() : 입력 객체로 부터 console 에서 키보드로 입력받은 값을 가져오는 함수
	
			- 문자열 입력 
				1) 변수명.next(); : 엔터 기준으로 하나의 (next) 입력을 마침 처리 / 띄어쓰기 불가능
				2) 변수명.nextLine(); : .next()와 같으나 띄어쓰기 가능
					★ 주의점 . 다른 nextXXX()코드와 같이 사용 시 앞 전 .nextXXX의 엔터를 포함하므로 하나로 인식함 
					★ 해결법 . 의미없는 scan.nextLine()을 사용하므로 실 사용할 nextLine()과 구분함.
	
			- 정수형 입력
				1)변수명.nextByte();
				1)변수명.nextShort();
				1)변수명.nextInt();
				1)변수명.nextLong();
				★ char 형은 사용 불가
	
			- 실수형 입력
				1)변수명.nextFloat();
				1)변수명.nextDouble();
	
			- 논리형(boolean) 입력
				1)변수명.nextBoolean();
				★ boolean형이기 때문에 입력 값이 true / false 만 가능				
	
	=> 입력 객체 1개로 각 자료형 별로 사용 가능함
	=> 각 자료형의 허용범위를 벗어날 시 오류가 발생함

2. 출력함수
	- System.out.printIn()
		-> System : 시스템 관련 기능을 제공하는 클래스(설계도)
		-> out : 출력 관련 객체 반환
		-> . : 접근 연산자
		1. println() : 인수 값을 console에 출력 후 줄바꿈 처리를 하는 함수
		2. print() : 인수값을 console에 줄바꿈하지 않고 출력하는 함수
		3. printf() : 인수 값에 형식문자를 이용하여 수식을 출력하는 함수
			★ 형식 : printf("형식문자", 형식대입값);
			★ 형식문자 : printf() 함수에서 사용되는 의미가 담긴 문자
				1. %s : 문자열
				2. %c : 문자
				3. %d : 정수
				4. %f : 실수
				5. %자릿수d : 자릿수만큼 자릿수 차지 (만일 비어있으면 공백 처리) / 오른쪽 정렬
				6. %-자릿수d : 자릿수만큼 자릿수 차지 (만일 비어있으면 공백 처리) / 왼쪽 정렬
				7. %0자릿수d : 자릿수만큼 자릿수 차지 (만일 비어있으면 '0'처리) / 오른쪽 정렬
				8. %전체 자릿수.표현할 소수점 자릿수f : 자릿수만큼 자릿수 차지 / 소수점은 소수점자릿수 까지 차지

[이스케이프 / 제어문자]
1. \n : 줄바꿈
2. \t : 공백
3. \" : 큰 따옴표 한 개 출력
4. \' : 작은 따옴표 한 개 출력
5. \\ : 백 슬래시 한 개 출력
-> JAVA/ 파이썬 / C 모두 동일






















    
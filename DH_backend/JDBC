[JDBC] ★ J(Java) D(Data) B(Base) C(connect) ★
- 정의 : JAVA 와 DB Server 을 연동하는 기술
- JDBC 라이브러리를 사용
- JDBC / MySQL 라이브러리 다운
	https://dev.mysql.com/downloads/ -> [Connector / J] 다운 
	-> [Platform independent] 선택 -> 5.1M 다운 -> No thanks, just start my download.  으로 로그인 없이 다운
	-> 다운받은 파일 압축 풀기 -> 파일 내 mysql-connector-j-9.1.0.jar 파일 확인
	-> 내 프로젝트 MySQL JDBC 라이브러리 등록 (database 패키지에 넣어놨음)
	-> mysql-connector-j-9.1.0.jar 파일 오른쪽 클릭
	-> [build path] -> [add to build path] -> Libraries 로 이동됨
- DB 연동 코드

	1. 연동할 JDBC 라이브러리 클래스 로드하기 (예외처리 필수 !)
		- MySQL : com.mysql.cj.jdbc.Driver
		- Oracle : oracle.jdbc.driver.OracleDriver

	2. 지정한 DB 서버와 계정정보가 일치 했을 때 DB 연동 시도 / 성공 시 연동된 구현체 반환
		- .getConnection("jdbc:mysql://DB 서버 ip/DB명", "DB 서버 계정명", "DB 서버 비밀번호") : 연동 메소드
		- local의 경우 : "jdbc:mysql://localhost: DB 서버 ip//db명

	3. JDBC 핵심 인터페이스
		1) Connection : 서로 다른 DB 회사에서 제공하는 클래스들을 하나의 타입(인터페이스)에서 인스턴스를 생성하여 사용
						-> 서로 다른 DB 회사들이 자바의 Connection 인터페이스의 추상메소드를 구체화 해놓음
			- Connection conn = DdriverManager.getConnection("mysql"); 
			- Connection conn = DdriverManager.getConnection("oracle");
			- Connection conn = DdriverManager.getConnection("mariaDB");
			- 제공하는 추상메소드 
				★ .prepareStatement("sql 문법"); -> 연동된 DB 에 SQL 문법을 기재하는 메소드
		2) PreperedStatement
		3) ResultSet
	

- DB 연동 예시

	Connection connection;
	
	try {
		Class.forName("com.mysql.cj.jdbc.Driver"); 
		
		connection = 					
		DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb0103", "root","1234");
			
		System.out.println(">> DB 연동 성공");
		
		}catch (ClassNotFoundException e) {
			System.out.println(">> 프로젝트 내 jdbc 드라이버가 존재하지 않습니다." + e);
		}catch (SQLException e) {
			System.out.println(">> DB 연동 실패" + e);
		}